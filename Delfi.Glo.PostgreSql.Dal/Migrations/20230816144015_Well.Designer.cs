// <auto-generated />
using System;
using Delfi.Glo.PostgreSql.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Delfi.Glo.PostgreSql.Dal.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230816144015_Well")]
    partial class Well
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Delfi.Glo.Entities.Db.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CrewName")
                        .HasColumnType("text");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entitytype");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Crew");
                });

            modelBuilder.Entity("Delfi.Glo.Entities.Db.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entitytype");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WellName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Delfi.Glo.Entities.Db.Well", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CompressorUpTime")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentGLISetpoint")
                        .HasColumnType("integer");

                    b.Property<string>("CycleStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DeviceUpTime")
                        .HasColumnType("numeric");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entitytype");

                    b.Property<int>("GLISetPoint")
                        .HasColumnType("integer");

                    b.Property<decimal>("GlInjectionSetPoint")
                        .HasColumnType("numeric");

                    b.Property<string>("LastCycleStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OLiq")
                        .HasColumnType("integer");

                    b.Property<string>("PumpStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QOil")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Wc")
                        .HasColumnType("numeric");

                    b.Property<string>("WellName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Well");
                });

            modelBuilder.Entity("Delfi.Glo.Entities.Db.WellGeneralInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalMode")
                        .HasColumnType("text");

                    b.Property<decimal>("CompressorUpTime")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeviceUpTime")
                        .HasColumnType("numeric");

                    b.Property<decimal>("GlInjectionSetPoint")
                        .HasColumnType("numeric");

                    b.Property<string>("ProcessorState")
                        .HasColumnType("text");

                    b.Property<decimal>("Qg")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Ql")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Qo")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Qw")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Wc")
                        .HasColumnType("numeric");

                    b.Property<string>("WellViewComment1")
                        .HasColumnType("text");

                    b.Property<string>("WellViewComment2")
                        .HasColumnType("text");

                    b.Property<string>("WellViewComment3")
                        .HasColumnType("text");

                    b.Property<string>("WellViewComment4")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeneralInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
